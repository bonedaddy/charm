set_base 16;

print "Importing Cryptol spec for Xoodoo";
import "xoodoo.cry";

let alloc_init ty v = do {
    p <- crucible_alloc ty;
    crucible_points_to p v;
    return p;
};

let ptr_to_fresh n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init ty (crucible_term x);
    return (x, p);
};

charm_bc <- llvm_load_module "charm.bc";
charm_opt_bc <- llvm_load_module "charm-opt.bc";

let permute_spec = do {
  // Preconditions: amounts to having a symbolic array somewhere in memory, and a pointer to it
  (st, st_ptr) <- ptr_to_fresh "st" (llvm_array 12 (llvm_int 32));

  // Execution is just passing the pointer into the function
  crucible_execute_func [st_ptr];

  // Postcondition says that after running the function, `st_ptr` points to memory that contains the
  // same values that the spec would produce. Note that we use the `U32State` helpers to translate
  // the C-friendly array of `uint32_t`s into our Cryptol-friendly `State` type.
  crucible_points_to st_ptr (crucible_term {{ u32_state (permute (unu32_state st)) }});
};

let prove_permute mod solver = do {
  crucible_llvm_verify mod "permute" [] false permute_spec solver;
};

print "Proving unoptimized permute equivalent to spec using ABC";
result <- with_time (prove_permute charm_bc abc);
print (str_concat "Proof finished in " (str_concat (show result.0) "ms"));

print "Proving -O1 optimized permute equivalent to spec using ABC";
result <- with_time (prove_permute charm_opt_bc abc);
print (str_concat "Proof finished in " (str_concat (show result.0) "ms"));

print "Verification succeeded!";
