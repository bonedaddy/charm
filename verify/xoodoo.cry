// Cryptol implementation of the XOODOO permutation function based on the spec in the paper
// <https://eprint.iacr.org/2018/767>
//
// Developed by Adam C. Foltzer <acfoltzer@acfoltzer.net> for verification of charm

module Xoodoo where

type Rounds = 12

type RoundIx = [width (Rounds-1)]

// There are definitely more type aliases and helpers here than are strictly necessary, but it
// avoids confusion about which end of the various sequences to index from

type Lane = [32]

type LaneIx = [width 32-1]

// index from the end due to big-endian word representation
bit_of_lane : Lane -> LaneIx -> Bit
bit_of_lane l z = l ! z

type Plane = [4]Lane

type PlaneIx = [width 4-1]

lane_of_plane : Plane -> PlaneIx -> Lane
lane_of_plane a x = a @ x

bit_of_plane : Plane -> (PlaneIx, LaneIx) -> Bit
bit_of_plane a (x, z) = bit_of_lane (lane_of_plane a x) z

type State = [3]Plane

type StateIx = [width 3-1]

plane_of_state : State -> StateIx -> Plane
plane_of_state s i = s @ i

bit_of_state : State -> (PlaneIx, StateIx, LaneIx) -> Bit
bit_of_state s (x, y, z) = bit_of_lane (lane_of_plane (plane_of_state s y) x) z

cyclic_shift : Plane -> (PlaneIx, LaneIx) -> Plane
cyclic_shift a (t, v) =
  [ lane <<< v | lane <- a ] >>> t

property cyclic_shift_id_zero a = cyclic_shift a (0, 0) == a
property cyclic_shift_correct a (t, v) =
  and [ bit_of_plane a (x, z) == bit_of_plane a' (x + t, z + v) | x <- [0..3], z <- [0..31] ]
  where
    a' = cyclic_shift a (t, v)

theta : State -> State
theta [a0, a1, a2] = [a0 ^ e, a1 ^ e, a2 ^ e]
  where
    e = cyclic_shift p (1, 5) ^ cyclic_shift p (1, 14)
    p = a0 ^ a1 ^ a2

rho_west : State -> State
rho_west [a0, a1, a2] = [a0, a1', a2']
  where
    a1' = cyclic_shift a1 (1, 0)
    a2' = cyclic_shift a2 (0, 11)

c : RoundIx -> Plane
c i = [cis @ i, 0, 0, 0]
  where
    cis = [ 0x00000058, 0x00000038, 0x000003C0
          , 0x000000D0, 0x00000120, 0x00000014
          , 0x00000060, 0x0000002C, 0x00000380
          , 0x000000F0, 0x000001A0, 0x00000012
          ]

iota : RoundIx -> State -> State
iota i [a0, a1, a2] = [a0', a1, a2]
  where
    a0' = a0 ^ c i

chi : State -> State
chi [a0, a1, a2] = [a0 ^ b0, a1 ^ b1, a2 ^ b2]
  where
    b0 = ~a1 && a2
    b1 = ~a2 && a0
    b2 = ~a0 && a1

rho_east : State -> State
rho_east [a0, a1, a2] = [a0, a1', a2']
  where
    a1' = cyclic_shift a1 (0, 1)
    a2' = cyclic_shift a2 (2, 8)

round : RoundIx -> State -> State
round i s = rho_east (chi (iota i (rho_west (theta s))))

// The main entrypoint; performs the full 12-round Xoodoo permutation
permute : State -> State
permute s0 = ss ! 0
  where
    ss = [s0] # [ round i s
                | s <- ss
                | i <- [0 .. 11]
                ]

// The flattened representation found in the paper; not used by any implementation I've found yet
type FlatState = [384]

flatten_state : State -> FlatState
flatten_state s = join (reverse [ join (reverse p) | p <- s ])

unflatten_state : FlatState -> State
unflatten_state s = [ reverse (split `{4} a) | a <- reverse (split `{3} s) ]

bit_of_flat_state : FlatState -> (PlaneIx, StateIx, LaneIx) -> Bit
bit_of_flat_state fs (x, y, z) = fs ! i
  where i = zext z + 32 * (zext x + 4 * (zext y : [width 384-1]))

property flatten_index_correct s (x, y, z) =
  bit_of_state s (x, y, z) == bit_of_flat_state (flatten_state s) (x, y, z)

property unflatten_index_correct fs (x, y, z) =
  bit_of_state (unflatten_state fs) (x, y, z) == bit_of_flat_state fs (x, y, z)

property flat_inv1 s = unflatten_state (flatten_state s) == s
property flat_inv2 fs = flatten_state (unflatten_state fs) == fs

// This is the representation used by the reference implementation and charm.c, so this type works
// as an adapter when writing the verification property
type U32State = [12][32]

u32_state : State -> U32State
u32_state s = join s

unu32_state : U32State -> State
unu32_state us = split us

property u32_inv1 s = unu32_state (u32_state s) == s
property u32_inv2 us = u32_state (unu32_state us) == us

////////////////////////////////////////////////////////////////////////////////////////////////////
// Test vector/debugging
////////////////////////////////////////////////////////////////////////////////////////////////////

// Run the round function, but keep all of the intermediate states around for debugging
round_expanded : RoundIx -> State -> [5]State
round_expanded i s0 = drop `{1} ss
  where
    ss = [s0] # [ f s | s <- ss | f <- [theta, rho_west, iota i, chi, rho_east] ]

// Run the permute function, but keep all of the intermediate states around for debugging
permute_expanded : State -> [12][5]State
permute_expanded s0 = ss
  where
    ss = [round_expanded 0 s0] # [ round_expanded i (s ! 0) | s <- ss | i <- [1 .. 11] ]

/// These intermediate states were generated by dumping output from the reference implementation in
/// <https://github.com/XKCP/XKCP>
property reference_states_match = permute_expanded zero == reference_states

reference_states : [12][5]State
reference_states =
  [
  // round 0
   [
   // state after theta
    [[0x00000000, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000]],
   // state after rho_west
    [[0x00000000, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000]],
   // state after iota 0
    [[0x00000058, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000]],
   // state after chi
    [[0x00000058, 0x00000000, 0x00000000, 0x00000000],
     [0x00000058, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000]],
   // state after rho_east
    [[0x00000058, 0x00000000, 0x00000000, 0x00000000],
     [0x000000b0, 0x00000000, 0x00000000, 0x00000000],
     [0x00000000, 0x00000000, 0x00000000, 0x00000000]]],

   // etc

   [[[0x00000058, 0x003a1d00, 0x00000000, 0x00000000],
     [0x000000b0, 0x003a1d00, 0x00000000, 0x00000000],
     [0x00000000, 0x003a1d00, 0x00000000, 0x00000000]],

    [[0x00000058, 0x003a1d00, 0x00000000, 0x00000000],
     [0x00000000, 0x000000b0, 0x003a1d00, 0x00000000],
     [0x00000000, 0xd0e80001, 0x00000000, 0x00000000]],

    [[0x00000060, 0x003a1d00, 0x00000000, 0x00000000],
     [0x00000000, 0x000000b0, 0x003a1d00, 0x00000000],
     [0x00000000, 0xd0e80001, 0x00000000, 0x00000000]],

    [[0x00000060, 0xd0d21d01, 0x00000000, 0x00000000],
     [0x00000060, 0x00121db0, 0x003a1d00, 0x00000000],
     [0x00000000, 0xd0e800b1, 0x003a1d00, 0x00000000]],

    [[0x00000060, 0xd0d21d01, 0x00000000, 0x00000000],
     [0x000000c0, 0x00243b60, 0x00743a00, 0x00000000],
     [0x3a1d0000, 0x00000000, 0x00000000, 0xe800b1d0]]],


   [[[0x2c62007d, 0xd35a0781, 0x975cb807, 0x0007401d],
     [0x2c6200dd, 0x03ac21e0, 0x97288207, 0x0007401d],
     [0x167f001d, 0x03881a80, 0x975cb807, 0xe807f1cd]],

    [[0x2c62007d, 0xd35a0781, 0x975cb807, 0x0007401d],
     [0x0007401d, 0x2c6200dd, 0x03ac21e0, 0x97288207],
     [0xf800e8b3, 0x40d4001c, 0xe5c03cba, 0x3f8e6f40]],

    [[0x2c6203bd, 0xd35a0781, 0x975cb807, 0x0007401d],
     [0x0007401d, 0x2c6200dd, 0x03ac21e0, 0x97288207],
     [0xf800e8b3, 0x40d4001c, 0xe5c03cba, 0x3f8e6f40]],

    [[0xd462ab1f, 0x93ce0781, 0x731ca41d, 0x28812d5d],
     [0x04654311, 0xbf68075c, 0x11b0a1e5, 0x9729821a],
     [0xf805a8b3, 0x6cf40040, 0xe5603d5a, 0xa8a6ed42]],

    [[0xd462ab1f, 0x93ce0781, 0x731ca41d, 0x28812d5d],
     [0x08ca8622, 0x7ed00eb9, 0x236143ca, 0x2e530435],
     [0x603d5ae5, 0xa6ed42a8, 0x05a8b3f8, 0xf400406c]]],

   [[[0x146eb735, 0x5c96d3b3, 0xdf91c4e8, 0xc7207dc2],
     [0xc8c69a08, 0xb188da8b, 0x8fec233f, 0xc1f254aa],
     [0xa03146cf, 0x69b5969a, 0xa925d30d, 0x1ba110f3]],

    [[0x146eb735, 0x5c96d3b3, 0xdf91c4e8, 0xc7207dc2],
     [0xc1f254aa, 0xc8c69a08, 0xb188da8b, 0x8fec233f],
     [0x8a367d01, 0xacb4d34d, 0x2e986d49, 0x088798dd]],

    [[0x146eb7e5, 0x5c96d3b3, 0xdf91c4e8, 0xc7207dc2],
     [0xc1f254aa, 0xc8c69a08, 0xb188da8b, 0x8fec233f],
     [0x8a367d01, 0xacb4d34d, 0x2e986d49, 0x088798dd]],

    [[0x1e6a9ee4, 0x78a692f6, 0xd181e1a8, 0xc723e502],
     [0xd5bad64e, 0x98c49aba, 0x60895a2b, 0x48cc463d],
     [0x4ba63d0b, 0x2cf4db45, 0x0e90774a, 0x004b9ae0]],

    [[0x1e6a9ee4, 0x78a692f6, 0xd181e1a8, 0xc723e502],
     [0xab75ac9d, 0x31893575, 0xc112b456, 0x91988c7a],
     [0x90774a0e, 0x4b9ae000, 0xa63d0b4b, 0xf4db452c]]],


   [[[0x597a3ce8, 0xcbb45548, 0xd6c9d165, 0x85455e1f],
     [0xec650e91, 0x829bf2cb, 0xc65a849b, 0xd3fe3767],
     [0xd767e802, 0xf88827be, 0xa1753b86, 0xb6bdfe31]],

    [[0x597a3ce8, 0xcbb45548, 0xd6c9d165, 0x85455e1f],
     [0xd3fe3767, 0xec650e91, 0x829bf2cb, 0xc65a849b],
     [0x3f4016bb, 0x413df7c4, 0xa9dc350b, 0xeff18db5]],

    [[0x597a3dc8, 0xcbb45548, 0xd6c9d165, 0x85455e1f],
     [0xd3fe3767, 0xec650e91, 0x829bf2cb, 0xc65a849b],
     [0x3f4016bb, 0x413df7c4, 0xa9dc350b, 0xeff18db5]],

    [[0x757a3d50, 0xcaaca40c, 0xff8dd465, 0xace4573b],
     [0x93c41e27, 0x66e50e99, 0xd49a32af, 0xc65ed691],
     [0xbdc4149c, 0x657cfd55, 0xa9ce1781, 0xadeb0d35]],

    [[0x757a3d50, 0xcaaca40c, 0xff8dd465, 0xace4573b],
     [0x27883c4f, 0xcdca1d32, 0xa934655f, 0x8cbdad23],
     [0xce1781a9, 0xeb0d35ad, 0xc4149cbd, 0x7cfd5565]]],


   [[[0xca3085d2, 0x363115e6, 0x91d8bd02, 0xb2200362],
     [0x98c284cd, 0x3157acd8, 0xc7610c38, 0x9279f97a],
     [0x715d392b, 0x17908447, 0xaa41f5da, 0x6239013c]],

    [[0xca3085d2, 0x363115e6, 0x91d8bd02, 0xb2200362],
     [0x9279f97a, 0x98c284cd, 0x3157acd8, 0xc7610c38],
     [0xe9c95b8a, 0x842238bc, 0x0faed552, 0xc809e311]],

    [[0xca3085c6, 0x363115e6, 0x91d8bd02, 0xb2200362],
     [0x9279f97a, 0x98c284cd, 0x3157acd8, 0xc7610c38],
     [0xe9c95b8a, 0x842238bc, 0x0faed552, 0xc809e311]],

    [[0xa3b08746, 0x32112dd6, 0x9f70ec00, 0xba28e063],
     [0x90497d3e, 0xaad3818f, 0xa10784d8, 0xf5410c5a],
     [0xf98023b2, 0x0ce0b8b5, 0x2fa9d58a, 0x8d48ef09]],

    [[0xa3b08746, 0x32112dd6, 0x9f70ec00, 0xba28e063],
     [0x2092fa7d, 0x55a7031f, 0x420f09b1, 0xea8218b5],
     [0xa9d58a2f, 0x48ef098d, 0x8023b2f9, 0xe0b8b50c]]],


   [[[0x328f9014, 0x912ac5ee, 0x3d850f53, 0x04701e3f],
     [0xb1aded2f, 0xf69ceb27, 0xe0faeae2, 0x54dae6e9],
     [0x38ea9d7d, 0xebd4e1b5, 0x22d651aa, 0x5ee04b50]],

    [[0x328f9014, 0x912ac5ee, 0x3d850f53, 0x04701e3f],
     [0x54dae6e9, 0xb1aded2f, 0xf69ceb27, 0xe0faeae2],
     [0x54ebe9c7, 0xa70daf5e, 0xb28d5116, 0x025a82f7]],

    [[0x328f9074, 0x912ac5ee, 0x3d850f53, 0x04701e3f],
     [0x54dae6e9, 0xb1aded2f, 0xf69ceb27, 0xe0faeae2],
     [0x54ebe9c7, 0xa70daf5e, 0xb28d5116, 0x025a82f7]],

    [[0x32ae9972, 0x972ac7be, 0x3d841f43, 0x06701e2a],
     [0x76def6d9, 0xa18fad8f, 0xfb9ce566, 0xe4daf6ea],
     [0x10bb8f4e, 0x8788875f, 0x7095b132, 0xe2d06237]],

    [[0x32ae9972, 0x972ac7be, 0x3d841f43, 0x06701e2a],
     [0xedbdedb2, 0x431f5b1f, 0xf739cacd, 0xc9b5edd5],
     [0x95b13270, 0xd06237e2, 0xbb8f4e10, 0x88875f87]]],


   [[[0x71e507aa, 0x52ce031f, 0x5da1b636, 0x86c4f1a8],
     [0xaef6736a, 0x86fb9fbe, 0x971c63b8, 0x49010257],
     [0xd6faaca8, 0x1586f343, 0xdbaae765, 0x0833b005]],

    [[0x71e507aa, 0x52ce031f, 0x5da1b636, 0x86c4f1a8],
     [0x49010257, 0xaef6736a, 0x86fb9fbe, 0x971c63b8],
     [0xd56546b7, 0x379a18ac, 0x573b2edd, 0x9d802841]],

    [[0x71e50786, 0x52ce031f, 0x5da1b636, 0x86c4f1a8],
     [0x49010257, 0xaef6736a, 0x86fb9fbe, 0x971c63b8],
     [0xd56546b7, 0x379a18ac, 0x573b2edd, 0x9d802841]],

    [[0xe5814326, 0x43c60b9b, 0x0ca19677, 0x8e44f9e9],
     [0x69810357, 0xeeb27079, 0x8e7b0f9c, 0x9558b210],
     [0xdd6546e6, 0x9baa68cc, 0xd5612755, 0x8c982a51]],

    [[0xe5814326, 0x43c60b9b, 0x0ca19677, 0x8e44f9e9],
     [0xd30206ae, 0xdd64e0f3, 0x1cf61f39, 0x2ab16421],
     [0x612755d5, 0x982a518c, 0x6546e6dd, 0xaa68cc9b]]],


   [[[0x627faae0, 0xb35355d8, 0xf30fcb55, 0x778dd6c3],
     [0x54fcef68, 0x2df1beb0, 0xe358421b, 0xd3784b0b],
     [0xe6d9bc13, 0x68bf0fcf, 0x9ae8bbff, 0x53a1e3b1]],

    [[0x627faae0, 0xb35355d8, 0xf30fcb55, 0x778dd6c3],
     [0xd3784b0b, 0x54fcef68, 0x2df1beb0, 0xe358421b],
     [0xcde09f36, 0xf87e7b45, 0x45dffcd7, 0x0f1d8a9d]],

    [[0x627fa960, 0xb35355d8, 0xf30fcb55, 0x778dd6c3],
     [0xd3784b0b, 0x54fcef68, 0x2df1beb0, 0xe358421b],
     [0xcde09f36, 0xf87e7b45, 0x45dffcd7, 0x0f1d8a9d]],

    [[0x6eff3d54, 0x1b5145dd, 0xb3018b12, 0x7b885e47],
     [0xf1676b4b, 0x57fdebf0, 0x9ff1bdb0, 0x93d81659],
     [0x5ce0dd3d, 0xbcd2d165, 0x492fc877, 0x8f4d8a85]],

    [[0x6eff3d54, 0x1b5145dd, 0xb3018b12, 0x7b885e47],
     [0xe2ced697, 0xaffbd7e0, 0x3fe37b61, 0x27b02cb3],
     [0x2fc87749, 0x4d8a858f, 0xe0dd3d5c, 0xd2d165bc]]],


   [[[0xf60ff7ff, 0x03407c77, 0x92efc305, 0x0f3a20a5],
     [0x7a3e1c3c, 0xb7eaee4a, 0x1e0d3376, 0x53025251],
     [0xb738bde2, 0x559bbc25, 0xc133754b, 0xa6631b5e]],

    [[0xf60ff7ff, 0x03407c77, 0x92efc305, 0x0f3a20a5],
     [0x53025251, 0x7a3e1c3c, 0xb7eaee4a, 0x1e0d3376],
     [0xc5ef15b9, 0xdde12aac, 0x9baa5e09, 0x18daf533]],

    [[0xf60ff70f, 0x03407c77, 0x92efc305, 0x0f3a20a5],
     [0x53025251, 0x7a3e1c3c, 0xb7eaee4a, 0x1e0d3376],
     [0xc5ef15b9, 0xdde12aac, 0x9baa5e09, 0x18daf533]],

    [[0x72e2f2a7, 0x86815ef7, 0x9aefd304, 0x0fe8e4a4],
     [0x6102b057, 0x783e486f, 0xb7af6f4e, 0x192d33f2],
     [0xc4ef15e9, 0xa5df2aa4, 0xbeaa7243, 0x08dfe661]],

    [[0x72e2f2a7, 0x86815ef7, 0x9aefd304, 0x0fe8e4a4],
     [0xc20560ae, 0xf07c90de, 0x6f5ede9d, 0x325a67e4],
     [0xaa7243be, 0xdfe66108, 0xef15e9c4, 0xdf2aa4a5]]],

   [[[0x281f76bd, 0xa056aeb1, 0x52525d77, 0x626329ae],
     [0x98f8e4b4, 0xd6ab6098, 0xa7e350ee, 0x5fd1aaee],
     [0xf08fc7a4, 0xf931914e, 0x27a867b7, 0xb2a169af]],

    [[0x281f76bd, 0xa056aeb1, 0x52525d77, 0x626329ae],
     [0x5fd1aaee, 0x98f8e4b4, 0xd6ab6098, 0xa7e350ee],
     [0x7e3d2784, 0x8c8a77c9, 0x433db93d, 0x0b4d7d95]],

    [[0x281f771d, 0xa056aeb1, 0x52525d77, 0x626329ae],
     [0x5fd1aaee, 0x98f8e4b4, 0xd6ab6098, 0xa7e350ee],
     [0x7e3d2784, 0x8c8a77c9, 0x433db93d, 0x0b4d7d95]],

    [[0x0833721d, 0xa454bdf8, 0x5346c452, 0x6a6f04bf],
     [0x5fd3faf7, 0xb8ac6c84, 0xc6e924da, 0xc7c150c4],
     [0x29fdaf66, 0x942237cd, 0xc79499b5, 0x8ecd2dd5]],

    [[0x0833721d, 0xa454bdf8, 0x5346c452, 0x6a6f04bf],
     [0xbfa7f5ee, 0x7158d909, 0x8dd249b5, 0x8f82a189],
     [0x9499b5c7, 0xcd2dd58e, 0xfdaf6629, 0x2237cd94]]],


   [[[0x6956d7b3, 0x897ff3bf, 0x3b2f2db9, 0xf7e1f5b5],
     [0xdec25040, 0x5c73974e, 0xe5bba05e, 0x120c5083],
     [0xf5fc1069, 0xe0069bc9, 0x95c68fc2, 0xbfb93c9e]],

    [[0x6956d7b3, 0x897ff3bf, 0x3b2f2db9, 0xf7e1f5b5],
     [0x120c5083, 0xdec25040, 0x5c73974e, 0xe5bba05e],
     [0xe0834faf, 0x34de4f00, 0x347e14ae, 0xc9e4f5fd]],

    [[0x6956d7a1, 0x897ff3bf, 0x3b2f2db9, 0xf7e1f5b5],
     [0x120c5083, 0xdec25040, 0x5c73974e, 0xe5bba05e],
     [0xe0834faf, 0x34de4f00, 0x347e14ae, 0xc9e4f5fd]],

    [[0x89d5d88d, 0xa963fcbf, 0x1b232d19, 0xffa5a014],
     [0x1b58c083, 0x57e3e0ff, 0x5772be5f, 0xd3baa05e],
     [0xf28b4fad, 0x625e4f40, 0x702e86e8, 0xc9fef5b7]],

    [[0x89d5d88d, 0xa963fcbf, 0x1b232d19, 0xffa5a014],
     [0x36b18106, 0xafc7c1fe, 0xaee57cbe, 0xa77540bd],
     [0x2e86e870, 0xfef5b7c9, 0x8b4fadf2, 0x5e4f4062]]]]
